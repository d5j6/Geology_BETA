using System;
using UnityEngine;

/// <summary>
/// Интерфейс агента манипуляции. Агент манипуляции - это сущность, которая может снабжать информацией о манипуляции. Информация о манипуляции строго стандартизирована, воспользоваться 
/// ей - задача IGestureManipulator'а
/// Стандарт информации, которую должен отдавать IGestureManipulationAgent:
///     Move: Информация о перемещении должна передавать смещение (Vector3) руки (не объекта манипуляции) относительно точки начала манипуляции.
///     Rotate: Из-за того, что мы не вертим объект рукой, как обычно это делаем в жизни, а делаем это опосредованно (с помощью slider-like поведения), мы не можем указывать реальный поворот
/// руки, так что тут надо придумать стандарт, и я думаю, за основу поворота нужно взять те же смещения по осям, что в предыдущем пункте, ибо это и есть первоначальная "сырая" инфа и отдать в 
/// немодифицированном виде, каким-то образом распределенными по осям, идентифицирующим углы вращения, а там путь манипулятор сам решает, что с этой сырой инфой делать.
///     Scale: В данный момент мы не имеем возможности контролировать скейлинг по всем осям сразу, и вряд ли даже если такая возможность появится, это будет уместно и удобно, а значит можно 
/// передавать float, обозначающий масштабирование по всем осям сразу. Однако, если мы делаем стандартный интерфейс, то надо предусмотреть все возможности. Просто в большинстве случаев на 
/// оси будут одни и те же значения.
/// 
/// Также нужно отдавать события начала и конца манипуляции, т.к. это часто запрашиваемая у манипулятора информация, к которой он должен иметь доступ. В методах старта манипуляции мы передаем
/// геймобджект, над которым производится манипуляция.
/// </summary>
public interface IGestureManipulationAgent
{
    Action<Vector3> Move { get; set; }
    Action<Vector3> Rotate { get; set; }
    Action<Vector3> Scale { get; set; }

    Action<GameObject> MoveStarted { get; set; }
    Action MoveEnded { get; set; }
    Action<GameObject> RotationStarted { get; set; }
    Action RotationEnded { get; set; }
    Action<GameObject> ScaleStarted { get; set; }
    Action ScaleEnded { get; set; }
}